// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  Password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Tracks the number of summaries a user can create.
  credits Int @default(10)

  // Relations
  accounts     Account[]
  sessions     Session[]
  summaries    Summary[]
  subscription Subscription?
  videos       Video[]
}

// ## Summary Model
// Represents a single summarization job. It stores the original content
// (URL or text) and the final AI-generated summary.
model Summary {
  id                  String        @id @default(cuid())
  title               String?
  originalContentUrl  String?
  originalContentText String? // Use a text/string type appropriate for long content.
  generatedSummary    String? // Nullable until the job is complete.
  status              SummaryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key linking back to the User.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Adds a database index for faster lookups by user.
}

// ## Subscription Model (Optional but recommended for monetization)
// Manages user payment plans and links to a payment provider like Stripe.
model Subscription {
  id     String  @id @default(cuid())
  plan   Plan    @default(FREE)
  status String?

  // IDs from your payment provider.
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  currentPeriodEnd     DateTime? // Date when the current subscription period ends.

  // One-to-one relationship with the User.
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SummaryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ## Defines the available subscription tiers.
enum Plan {
  FREE
  PRO
  BUSINESS
}

model Video {
  id        String   @id @default(uuid())
  prompt    String
  url       String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}
